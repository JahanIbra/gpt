from typing import Dict, List, Any, Optional, Tuple
import json
import os
import asyncio
import sqlite3
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import DB_PATH, logger, ADMIN_IDS
from database import load_knowledge, save_knowledge
from vector_search import update_faiss_index
from pdf_handler import update_all_pdf_index
from analytics import analytics
from backup_manager import backup_manager

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è CallbackQuery
DB_KNOWLEDGE = "admin_db:knowledge"
DB_CACHE = "admin_db:cache"
DB_PDF = "admin_db:pdf"
DB_UNANSWERED = "admin_db:unanswered"
DB_EXPORT = "admin_db:export"
DB_IMPORT = "admin_db:import"
DB_CLEAR_CACHE = "admin_db:clear_cache"
DB_BACK = "admin_db:back"

async def admin_base_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        await update.callback_query.message.edit_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
    db_stats = await get_database_stats()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton(f"üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ({db_stats['knowledge_count']})", callback_data=DB_KNOWLEDGE)],
        [InlineKeyboardButton(f"üíæ –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ ({db_stats['cache_count']})", callback_data=DB_CACHE)],
        [InlineKeyboardButton(f"üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã ({db_stats['pdf_count']})", callback_data=DB_PDF)],
        [InlineKeyboardButton(f"‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ({db_stats['unanswered_count']})", callback_data=DB_UNANSWERED)],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π", callback_data=DB_EXPORT),
         InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π", callback_data=DB_IMPORT)],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data=DB_CLEAR_CACHE)],
        [InlineKeyboardButton("üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = (
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        f"–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_stats['db_size']:.2f} –ú–ë\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_stats['last_update']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if update.callback_query:
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def handle_admin_db_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    data = query.data
    
    if data == DB_KNOWLEDGE:
        await handle_knowledge_menu(update, context)
    elif data == DB_CACHE:
        await handle_cache_menu(update, context)
    elif data == DB_PDF:
        await handle_pdf_menu(update, context)
    elif data == DB_UNANSWERED:
        await handle_unanswered_menu(update, context)
    elif data == DB_EXPORT:
        await handle_export_db(update, context)
    elif data == DB_IMPORT:
        await handle_import_db(update, context)
    elif data == DB_CLEAR_CACHE:
        await handle_clear_cache(update, context)
    elif data == "admin_broadcast":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        from admin_messaging import start_message_composition
        await start_message_composition(update, context)
    elif data == DB_BACK or data == "admin_panel":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await admin_base_menu(update, context)
    elif data.startswith("admin_db:knowledge:"):
        await handle_knowledge_action(update, context)
    elif data.startswith("admin_db:cache:"):
        await handle_cache_action(update, context)
    elif data.startswith("admin_db:pdf:"):
        await handle_pdf_action(update, context)
    elif data.startswith("admin_db:unanswered:"):
        await handle_unanswered_action(update, context)

async def get_database_stats() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_size = os.path.getsize(DB_PATH) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        c.execute("SELECT COUNT(*) FROM knowledge")
        knowledge_count = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM cache")
        cache_count = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM pdf_files")
        pdf_count = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM unanswered_questions WHERE answered=0")
        unanswered_count = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        c.execute("SELECT MAX(timestamp) FROM knowledge")
        last_update = c.fetchone()[0] or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        conn.close()
        
        return {
            "db_size": db_size,
            "knowledge_count": knowledge_count,
            "cache_count": cache_count,
            "pdf_count": pdf_count,
            "unanswered_count": unanswered_count,
            "last_update": last_update
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {
            "db_size": 0,
            "knowledge_count": 0,
            "cache_count": 0,
            "pdf_count": 0,
            "unanswered_count": 0,
            "last_update": "–û—à–∏–±–∫–∞"
        }

async def handle_knowledge_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
    knowledge = load_knowledge()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_items = 5
    total_items = len(knowledge)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = context.user_data.get('knowledge_page', 0)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * max_items
    end_idx = min(start_idx + max_items, total_items)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    message_text = f"üß† <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b> (–≤—Å–µ–≥–æ: {total_items})\n\n"
    
    if knowledge:
        for i in range(start_idx, end_idx):
            item = knowledge[i]
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
            question = item.get("question", "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞")
            if len(question) > 50:
                question = question[:47] + "..."
            
            message_text += f"{i+1}. {question}\n"
    else:
        message_text += "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_db:knowledge:prev_page"))
    
    if end_idx < total_items:
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="admin_db:knowledge:next_page"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="admin_db:knowledge:add")])
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å", callback_data="admin_db:knowledge:update_index")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.message.edit_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def handle_knowledge_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    action = query.data.split(":")[-1]
    
    if action == "prev_page":
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        context.user_data['knowledge_page'] = max(0, context.user_data.get('knowledge_page', 0) - 1)
        await handle_knowledge_menu(update, context)
    
    elif action == "next_page":
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        context.user_data['knowledge_page'] = context.user_data.get('knowledge_page', 0) + 1
        await handle_knowledge_menu(update, context)
    
    elif action == "add":
        # –°–æ–æ–±—â–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /teach
        await query.message.edit_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /teach\n"
            "–î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /teach_bulk\n\n"
            "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å FAISS.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_KNOWLEDGE)]]),
            parse_mode=ParseMode.HTML
        )
    
    elif action == "update_index":
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å FAISS
        await query.message.edit_text(
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ FAISS</b>\n\n"
            "–ù–∞—á–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            parse_mode=ParseMode.HTML
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        success = await update_faiss_index()
        
        if success:
            await query.message.edit_text(
                "‚úÖ <b>–ò–Ω–¥–µ–∫—Å FAISS —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_KNOWLEDGE)]]),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ FAISS</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_KNOWLEDGE)]]),
                parse_mode=ParseMode.HTML
            )

async def handle_cache_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –æ—Ç–≤–µ—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        c.execute("SELECT COUNT(*) FROM cache")
        cache_count = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
        c.execute("""
        SELECT question_hash, question, timestamp 
        FROM cache 
        ORDER BY timestamp DESC 
        LIMIT 5
        """)
        
        recent_items = [dict(row) for row in c.fetchall()]
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üíæ <b>–ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤</b> (–≤—Å–µ–≥–æ: {cache_count})\n\n"
        
        if recent_items:
            message_text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n"
            for i, item in enumerate(recent_items):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
                question = item["question"]
                if len(question) > 50:
                    question = question[:47] + "..."
                
                message_text += f"{i+1}. {question}\n"
        else:
            message_text += "–ö—ç—à –ø—É—Å—Ç."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_db:cache:clear")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ: {e}")
        await update.callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]]),
            parse_mode=ParseMode.HTML
        )

async def handle_cache_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∫—ç—à–µ–º –æ—Ç–≤–µ—Ç–æ–≤"""
    query = update.callback_query
    action = query.data.split(":")[-1]
    
    if action == "clear":
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("DELETE FROM cache")
            conn.commit()
            conn.close()
            
            await query.message.edit_text(
                "‚úÖ <b>–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</b>\n\n"
                "–í—Å–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_CACHE)]]),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            await query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_CACHE)]]),
                parse_mode=ParseMode.HTML
            )

async def handle_pdf_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PDF-—Ñ–∞–π–ª–∞—Ö
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PDF-—Ñ–∞–π–ª–æ–≤
        c.execute("""
        SELECT file_hash, filename, page_count, indexed 
        FROM pdf_files 
        ORDER BY timestamp DESC
        """)
        
        pdf_files = [dict(row) for row in c.fetchall()]
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üìÑ <b>PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã</b> (–≤—Å–µ–≥–æ: {len(pdf_files)})\n\n"
        
        if pdf_files:
            for i, file in enumerate(pdf_files[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                status = "‚úÖ" if file["indexed"] == 1 else "‚è≥"
                message_text += f"{i+1}. {status} {file['filename']} ({file['page_count']} —Å—Ç—Ä.)\n"
            
            if len(pdf_files) > 5:
                message_text += f"\n...–∏ –µ—â–µ {len(pdf_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
        else:
            message_text += "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö PDF-—Ñ–∞–π–ª–æ–≤."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF", callback_data="admin_db:pdf:upload")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å PDF", callback_data="admin_db:pdf:update_index")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PDF-—Ñ–∞–π–ª–∞—Ö: {e}")
        await update.callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PDF-—Ñ–∞–π–ª–∞—Ö</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]]),
            parse_mode=ParseMode.HTML
        )

async def handle_pdf_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    query = update.callback_query
    action = query.data.split(":")[-1]
    
    if action == "upload":
        # –°–æ–æ–±—â–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ PDF —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_pdf
        await query.message.edit_text(
            "‚ûï <b>–ó–∞–≥—Ä—É–∑–∫–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF-—Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_pdf\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω.\n\n"
            "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –≤—Å–µ—Ö PDF-—Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å PDF'.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_PDF)]]),
            parse_mode=ParseMode.HTML
        )
    
    elif action == "update_index":
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å PDF
        await query.message.edit_text(
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
            "–ù–∞—á–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            parse_mode=ParseMode.HTML
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        success = await update_all_pdf_index()
        
        if success:
            await query.message.edit_text(
                "‚úÖ <b>–ò–Ω–¥–µ–∫—Å PDF —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_PDF)]]),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_PDF)]]),
                parse_mode=ParseMode.HTML
            )

async def handle_unanswered_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        c.execute("SELECT COUNT(*) FROM unanswered_questions WHERE answered=0")
        unanswered_count = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
        c.execute("""
        SELECT id, user_id, question, timestamp 
        FROM unanswered_questions 
        WHERE answered=0
        ORDER BY timestamp DESC 
        LIMIT 5
        """)
        
        recent_items = [dict(row) for row in c.fetchall()]
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"‚ùì <b>–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> (–≤—Å–µ–≥–æ: {unanswered_count})\n\n"
        
        if recent_items:
            for i, item in enumerate(recent_items):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
                question = item["question"]
                if len(question) > 50:
                    question = question[:47] + "..."
                
                message_text += f"{i+1}. [User: {item['user_id']}] {question}\n"
        else:
            message_text += "–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="admin_db:unanswered:answer")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="admin_db:unanswered:clear_all")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö: {e}")
        await update.callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]]),
            parse_mode=ParseMode.HTML
        )

async def handle_unanswered_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    query = update.callback_query
    action = query.data.split(":")[-1]
    
    if action == "answer":
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        try:
            conn = sqlite3.connect(DB_PATH)
            conn.row_factory = sqlite3.Row
            c = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            c.execute("""
            SELECT id, user_id, question, timestamp 
            FROM unanswered_questions 
            WHERE answered=0
            ORDER BY timestamp DESC 
            LIMIT 10
            """)
            
            items = [dict(row) for row in c.fetchall()]
            conn.close()
            
            if not items:
                await query.message.edit_text(
                    "‚úÖ <b>–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã!</b>\n\n"
                    "–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_UNANSWERED)]]),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = "üìù <b>–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å</b>\n\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å:\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            for i, item in enumerate(items):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
                question = item["question"]
                if len(question) > 30:
                    question = question[:27] + "..."
                
                keyboard.append([InlineKeyboardButton(
                    f"{i+1}. {question}",
                    callback_data=f"admin_db:unanswered:answer_to:{item['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_UNANSWERED)])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {e}")
            await query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_UNANSWERED)]]),
                parse_mode=ParseMode.HTML
            )
    
    elif action == "clear_all":
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            
            # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ
            c.execute("UPDATE unanswered_questions SET answered=1 WHERE answered=0")
            conn.commit()
            conn.close()
            
            await query.message.edit_text(
                "‚úÖ <b>–í—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã!</b>\n\n"
                "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_UNANSWERED)]]),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            await query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_UNANSWERED)]]),
                parse_mode=ParseMode.HTML
            )
            
    elif action.startswith("answer_to:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_id = int(action.split(":")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        try:
            conn = sqlite3.connect(DB_PATH)
            conn.row_factory = sqlite3.Row
            c = conn.cursor()
            
            c.execute("SELECT * FROM unanswered_questions WHERE id=?", (question_id,))
            question_data = dict(c.fetchone())
            
            # –û—Ç–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
            c.execute("UPDATE unanswered_questions SET answered=1 WHERE id=?", (question_id,))
            conn.commit()
            conn.close()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['current_question'] = question_data
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            await query.message.edit_text(
                f"üìù <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}</b>\n\n"
                f"<b>–í–æ–ø—Ä–æ—Å:</b> {question_data['question']}\n\n"
                f"–í–æ–ø—Ä–æ—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π?\n\n"
                f"–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /teach –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_UNANSWERED)]]),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
            await query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_UNANSWERED)]]),
                parse_mode=ParseMode.HTML
            )

async def handle_export_db(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>\n\n"
    message_text += "–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π..."
    
    await query.message.edit_text(
        message_text,
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge = load_knowledge()
        
        # –°–æ–∑–¥–∞–µ–º JSON-—Ñ–∞–π–ª
        export_path = "knowledge_export.json"
        with open(export_path, "w", encoding="utf-8") as f:
            json.dump(knowledge, f, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(export_path, "rb") as f:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=f,
                filename=f"knowledge_export_{datetime.now().strftime('%Y%m%d')}.json",
                caption="‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(export_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            "‚úÖ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "–§–∞–π–ª —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]]),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        await query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]]),
            parse_mode=ParseMode.HTML
        )

async def handle_import_db(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞
    await query.message.edit_text(
        "üì• <b>–ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>\n\n"
        "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª —Å –±–∞–∑–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "<i>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!</i>",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=DB_BACK)]]),
        parse_mode=ParseMode.HTML
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    context.user_data['awaiting_import'] = True
    
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    context.user_data['import_message_id'] = query.message.message_id

async def handle_clear_cache(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞"""
    query = update.callback_query
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏
    await query.message.edit_text(
        "üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞</b>\n\n"
        "–ù–∞—á–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
        c.execute("SELECT COUNT(*) FROM cache")
        before_count = c.fetchone()[0]
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—ç—à–∞
        c.execute("DELETE FROM cache")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É PDF-–∫—ç—à–∞
        c.execute("DELETE FROM pdf_cache")
        
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            f"‚úÖ <b>–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</b>\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ {before_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ PDF.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]]),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        await query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=DB_BACK)]]),
            parse_mode=ParseMode.HTML
        )
