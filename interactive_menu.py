import asyncio
from typing import Dict, List, Any, Optional, Callable, Union, Tuple
import json
import os
import re

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

from config import ADMIN_IDS, logger
from localization import _
from error_handler import catch_exceptions
from database import load_knowledge, save_knowledge
from vector_search import update_faiss_index
from pdf_handler import update_all_pdf_index

class MenuBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—é"""
    
    def __init__(self, title: str = "", description: str = "", back_button_text: str = "‚óÄÔ∏è –ù–∞–∑–∞–¥"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–µ–Ω—é
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é
            description: –û–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—é
            back_button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        """
        self.title = title
        self.description = description
        self.buttons = []
        self.back_button_text = back_button_text
        self.back_callback = None
    
    def add_button(self, text: str, callback_data: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
        
        Args:
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            callback_data: –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        """
        self.buttons.append(InlineKeyboardButton(text, callback_data=callback_data))
        return self
    
    def add_url_button(self, text: str, url: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π
        
        Args:
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            url: URL —Å—Å—ã–ª–∫–∏
        """
        self.buttons.append(InlineKeyboardButton(text, url=url))
        return self
    
    def add_row(self, buttons: List[InlineKeyboardButton]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
        """
        self.buttons.append(buttons)
        return self
    
    def set_back_button(self, text: str = None, callback_data: str = None):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        
        Args:
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            callback_data: –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        """
        if text is None:
            text = self.back_button_text
        
        self.back_callback = callback_data
        return self
    
    def build(self) -> Tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = ""
        if self.title:
            message_text += f"<b>{self.title}</b>\n\n"
        
        if self.description:
            message_text += f"{self.description}\n\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ï—Å–ª–∏ buttons - –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫, —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤ —Ä—è–¥—É
        if all(isinstance(btn, InlineKeyboardButton) for btn in self.buttons):
            for button in self.buttons:
                keyboard.append([button])
        else:
            # –ò–Ω–∞—á–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            for item in self.buttons:
                if isinstance(item, list):
                    keyboard.append(item)
                else:
                    keyboard.append([item])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞
        if self.back_callback:
            keyboard.append([InlineKeyboardButton(self.back_button_text, callback_data=self.back_callback)])
        
        return message_text, InlineKeyboardMarkup(keyboard)

@catch_exceptions()
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, menu_id: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        menu_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–Ω—é
    """
    query = update.callback_query
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
    menu_handlers = {
        "main_menu": show_main_menu,
        "admin_menu": show_admin_menu,
        "knowledge_menu": show_knowledge_menu,
        "pdf_menu": show_pdf_menu,
        "backup_menu": show_backup_menu,
        "settings_menu": show_settings_menu,
        "stats_menu": show_stats_menu
    }
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if menu_id in menu_handlers:
        await menu_handlers[menu_id](update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–Ω—é: {menu_id}")
        await query.answer("–ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

@catch_exceptions()
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    menu = MenuBuilder(
        title="ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        description="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    menu.add_button("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="action:ask_question")
    menu.add_button("üìö –û –±–æ—Ç–µ", callback_data="action:about_bot")
    
    if user_id in ADMIN_IDS:
        menu.add_button("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="menu:admin_menu")
    
    message_text, reply_markup = menu.build()
    
    if query:
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–ª–±—ç–∫, –∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

@catch_exceptions()
async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("admin_required"))
        return
    
    menu = MenuBuilder(
        title="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        description="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    menu.add_button("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="menu:knowledge_menu")
    menu.add_button("üìÑ PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="menu:pdf_menu")
    menu.add_button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu:stats_menu")
    menu.add_button("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="menu:backup_menu")
    menu.add_button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings_menu")
    menu.set_back_button(callback_data="menu:main_menu")
    
    message_text, reply_markup = menu.build()
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

@catch_exceptions()
async def show_knowledge_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("admin_required"))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    knowledge = load_knowledge()
    
    menu = MenuBuilder(
        title="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π",
        description=f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(knowledge)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    menu.add_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="action:add_knowledge")
    menu.add_button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π", callback_data="action:view_knowledge")
    menu.add_button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã", callback_data="action:export_knowledge")
    menu.add_button("üì• –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã", callback_data="action:import_knowledge")
    menu.add_button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å", callback_data="action:update_knowledge_index")
    menu.set_back_button(callback_data="menu:admin_menu")
    
    message_text, reply_markup = menu.build()
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

@catch_exceptions()
async def show_pdf_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("admin_required"))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ PDF-—Ñ–∞–π–ª–æ–≤
    pdf_dir = os.path.join(os.path.dirname(__file__), 'data', 'pdf_docs')
    pdf_count = 0
    
    if os.path.exists(pdf_dir):
        pdf_files = [f for f in os.listdir(pdf_dir) if f.endswith('.pdf')]
        pdf_count = len(pdf_files)
    
    menu = MenuBuilder(
        title="üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
        description=f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {pdf_count}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    menu.add_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å PDF", callback_data="action:add_pdf")
    menu.add_button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="action:view_pdf")
    menu.add_button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å PDF", callback_data="action:update_pdf_index")
    menu.set_back_button(callback_data="menu:admin_menu")
    
    message_text, reply_markup = menu.build()
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

@catch_exceptions()
async def show_backup_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("admin_required"))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    from backup_manager import backup_manager
    backups = await backup_manager.list_backups()
    
    menu = MenuBuilder(
        title="üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏",
        description=f"–í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    menu.add_button("üì¶ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="action:create_backup")
    menu.add_button("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", callback_data="action:list_backups")
    menu.add_button("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", callback_data="action:restore_backup")
    menu.set_back_button(callback_data="menu:admin_menu")
    
    message_text, reply_markup = menu.build()
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

@catch_exceptions()
async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("admin_required"))
        return
    
    menu = MenuBuilder(
        title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        description="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    menu.add_button("ü§ñ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞", callback_data="action:bot_settings")
    menu.add_button("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="action:security_settings")
    menu.add_button("üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="action:localization_settings")
    menu.add_button("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="action:monitoring_settings")
    menu.set_back_button(callback_data="menu:admin_menu")
    
    message_text, reply_markup = menu.build()
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

@catch_exceptions()
async def show_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("admin_required"))
        return
    
    menu = MenuBuilder(
        title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    )
    
    menu.add_button("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="action:user_stats")
    menu.add_button("üîç –ó–∞–ø—Ä–æ—Å—ã", callback_data="action:query_stats")
    menu.add_button("üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", callback_data="action:usage_stats")
    menu.add_button("üíª –°–∏—Å—Ç–µ–º–∞", callback_data="action:system_stats")
    menu.set_back_button(callback_data="menu:admin_menu")
    
    message_text, reply_markup = menu.build()
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

@catch_exceptions()
async def handle_menu_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        action: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    """
    query = update.callback_query
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    action_handlers = {
        "ask_question": handle_ask_question,
        "about_bot": handle_about_bot,
        "add_knowledge": handle_add_knowledge,
        "view_knowledge": handle_view_knowledge,
        "export_knowledge": handle_export_knowledge,
        "import_knowledge": handle_import_knowledge,
        "update_knowledge_index": handle_update_knowledge_index,
        "add_pdf": handle_add_pdf,
        "view_pdf": handle_view_pdf,
        "update_pdf_index": handle_update_pdf_index,
        "create_backup": handle_create_backup,
        "list_backups": handle_list_backups,
        "restore_backup": handle_restore_backup,
        "bot_settings": handle_bot_settings,
        "security_settings": handle_security_settings,
        "localization_settings": handle_localization_settings,
        "monitoring_settings": handle_monitoring_settings,
        "user_stats": handle_user_stats,
        "query_stats": handle_query_stats,
        "usage_stats": handle_usage_stats,
        "system_stats": handle_system_stats
    }
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if action in action_handlers:
        await action_handlers[action](update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–µ–Ω—é: {action}")
        await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

@catch_exceptions()
async def handle_ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )

@catch_exceptions()
async def handle_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–û –±–æ—Ç–µ'"""
    query = update.callback_query
    
    about_text = (
        "ü§ñ <b>–û –±–æ—Ç–µ</b>\n\n"
        "–Ø - –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏—Å–ª–∞–º–µ.\n\n"
        "üîç –Ø –∏—Å–ø–æ–ª—å–∑—É—é:\n"
        "‚Ä¢ –ë–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
        "‚Ä¢ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –Ø–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤\n\n"
        "üìö –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–ª–∞–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç.\n\n"
        "<i>–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —è –ª–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è. "
        "–ü–æ –≤–∞–∂–Ω—ã–º —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—Å–µ–≥–¥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∏–º–∞–º–æ–º –∏–ª–∏ —É—á—ë–Ω—ã–º.</i>"
    )
    
    menu = MenuBuilder()
    menu.set_back_button(callback_data="menu:main_menu")
    
    _, reply_markup = menu.build()
    
    await query.edit_message_text(
        about_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

@catch_exceptions()
async def handle_add_knowledge(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    context.user_data["state"] = "awaiting_knowledge_question"
    
    await query.edit_message_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
        parse_mode=ParseMode.HTML
    )

@catch_exceptions()
async def handle_update_knowledge_index(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π'"""
    query = update.callback_query
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    await query.edit_message_text(
        "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞</b>\n\n"
        "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...",
        parse_mode=ParseMode.HTML
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    success = await update_faiss_index()
    
    if success:
        menu = MenuBuilder()
        menu.set_back_button(callback_data="menu:knowledge_menu")
        _, reply_markup = menu.build()
        
        await query.edit_message_text(
            "‚úÖ <b>–ò–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            "–ò–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        menu = MenuBuilder()
        menu.set_back_button(callback_data="menu:knowledge_menu")
        _, reply_markup = menu.build()
        
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

@catch_exceptions()
async def handle_update_pdf_index(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å PDF'"""
    query = update.callback_query
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    await query.edit_message_text(
        "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
        "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...",
        parse_mode=ParseMode.HTML
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    success = await update_all_pdf_index()
    
    if success:
        menu = MenuBuilder()
        menu.set_back_button(callback_data="menu:pdf_menu")
        _, reply_markup = menu.build()
        
        await query.edit_message_text(
            "‚úÖ <b>–ò–Ω–¥–µ–∫—Å PDF —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            "–ò–Ω–¥–µ–∫—Å PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        menu = MenuBuilder()
        menu.set_back_button(callback_data="menu:pdf_menu")
        _, reply_markup = menu.build()
        
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
