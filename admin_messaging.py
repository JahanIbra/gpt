import asyncio
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
import time

from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import TelegramError, Forbidden, BadRequest

from config import logger, ADMIN_IDS
from database import get_all_users, log_admin_message, update_admin_message_stats, add_user_if_not_exists

class AdminMessagingManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
        """
        self.bot = bot
        self.in_progress_broadcasts = {}
        self.canceled_broadcasts = set()
    
    async def broadcast_message(self, admin_id: int, message_text: str, 
                              parse_mode: Optional[str] = None) -> Tuple[int, int, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
        
        Args:
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–≤—Å–µ–≥–æ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å–ø–µ—à–Ω–æ_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—à–∏–±–æ–∫)
        """
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        message_id = log_admin_message(admin_id, message_text)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users()
        
        total_users = len(users)
        success_count = 0
        error_count = 0
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞
        self.in_progress_broadcasts[message_id] = {
            "admin_id": admin_id,
            "started_at": datetime.now().isoformat(),
            "total": total_users,
            "completed": 0,
            "success": 0,
            "error": 0
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API
        batch_size = 20  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        delay = 1.0  # –°–µ–∫—É–Ω–¥ –º–µ–∂–¥—É batch_size —Å–æ–æ–±—â–µ–Ω–∏–π
        
        try:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for i, user in enumerate(users):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
                if message_id in self.canceled_broadcasts:
                    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{message_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}")
                    break
                
                user_id = user["user_id"]
                
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ –∏—Ö –∂–µ–ª–∞–Ω–∏—é)
                    if user_id in ADMIN_IDS and user_id != admin_id:
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode=parse_mode,
                        disable_notification=False,
                        disable_web_page_preview=True
                    )
                    
                    success_count += 1
                    self.in_progress_broadcasts[message_id]["success"] = success_count
                    
                except Forbidden:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                    error_count += 1
                    self.in_progress_broadcasts[message_id]["error"] = error_count
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    
                except (TelegramError, BadRequest) as e:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    error_count += 1
                    self.in_progress_broadcasts[message_id]["error"] = error_count
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                finally:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
                    self.in_progress_broadcasts[message_id]["completed"] += 1
                    
                    # –ö–∞–∂–¥—ã–µ batch_size —Å–æ–æ–±—â–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
                    if (i + 1) % batch_size == 0:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        update_admin_message_stats(message_id, success_count)
                        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É
                        await asyncio.sleep(delay)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_admin_message_stats(message_id, success_count)
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if message_id in self.in_progress_broadcasts:
                del self.in_progress_broadcasts[message_id]
            
            if message_id in self.canceled_broadcasts:
                self.canceled_broadcasts.remove(message_id)
                
            return total_users, success_count, error_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if message_id in self.in_progress_broadcasts:
                del self.in_progress_broadcasts[message_id]
            
            if message_id in self.canceled_broadcasts:
                self.canceled_broadcasts.remove(message_id)
                
            return total_users, success_count, error_count
    
    def cancel_broadcast(self, message_id: int) -> bool:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        
        Args:
            message_id: ID —Ä–∞—Å—Å—ã–ª–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–º–µ–Ω–µ–Ω–∞
        """
        if message_id in self.in_progress_broadcasts:
            self.canceled_broadcasts.add(message_id)
            return True
        return False
    
    def get_broadcast_status(self, message_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        
        Args:
            message_id: ID —Ä–∞—Å—Å—ã–ª–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∏–ª–∏ None, –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        return self.in_progress_broadcasts.get(message_id)
    
    def get_active_broadcasts(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö
        """
        return [
            {"message_id": msg_id, **info}
            for msg_id, info in self.in_progress_broadcasts.items()
        ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞)
messaging_manager = None

async def init_messaging_manager(bot: Bot) -> AdminMessagingManager:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    global messaging_manager
    if messaging_manager is None:
        messaging_manager = AdminMessagingManager(bot)
    return messaging_manager

async def start_message_composition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data["awaiting_broadcast_text"] = True
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await update.message.reply_text(
        "üì£ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É HTML. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n"
        "<code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "<code>&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;</code>\n"
        "<code>&lt;a href='...'&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt;</code>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode=ParseMode.HTML
    )

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.effective_user.id not in ADMIN_IDS or not context.user_data.get("awaiting_broadcast_text"):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text.strip()
    
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    del context.user_data["awaiting_broadcast_text"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    preview_message = await update.message.reply_text(
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n{message_text}",
        parse_mode=ParseMode.HTML
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data=f"broadcast_confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"broadcast_cancel")
        ]
    ]
    
    confirmation_message = await update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b> –±–æ—Ç–∞?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["broadcast_text"] = message_text
    context.user_data["preview_message_id"] = preview_message.message_id
    context.user_data["confirmation_message_id"] = confirmation_message.message_id

async def handle_broadcast_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    admin_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action = query.data
    
    if action == "broadcast_cancel":
        # –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        await query.message.edit_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if "broadcast_text" in context.user_data:
            del context.user_data["broadcast_text"]
        if "preview_message_id" in context.user_data:
            del context.user_data["preview_message_id"]
        if "confirmation_message_id" in context.user_data:
            del context.user_data["confirmation_message_id"]
            
    elif action == "broadcast_confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        message_text = context.user_data.get("broadcast_text", "")
        
        if not message_text:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=None
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            "‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if not messaging_manager:
            await init_messaging_manager(context.bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        total, success, error = await messaging_manager.broadcast_message(
            admin_id, 
            message_text, 
            parse_mode=ParseMode.HTML
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await query.message.edit_text(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {error}\n\n"
            f"<i>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç.</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if "broadcast_text" in context.user_data:
            del context.user_data["broadcast_text"]
        if "preview_message_id" in context.user_data:
            del context.user_data["preview_message_id"]
        if "confirmation_message_id" in context.user_data:
            del context.user_data["confirmation_message_id"]

async def check_user_exists(update: Update) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
    """
    user = update.effective_user
    if user:
        add_user_if_not_exists(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
