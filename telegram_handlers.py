from typing import Dict, List, Any, Optional, Tuple
import asyncio
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    filters
)
from telegram.constants import ParseMode

from config import logger, ADMIN_IDS
from admin_utils import (
    admin_base_menu,
    handle_admin_db_callback
)
from admin_messaging import (
    start_message_composition,
    handle_broadcast_message,
    handle_broadcast_button
)

async def handle_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üóÉÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
        [InlineKeyboardButton("üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
        [InlineKeyboardButton("üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await update.message.reply_text(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

def register_handlers(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CommandHandler("admin", handle_admin_panel, filters=filters.User(user_id=ADMIN_IDS)))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    application.add_handler(CallbackQueryHandler(handle_admin_db_callback, pattern=r"^admin_db"))
    application.add_handler(CallbackQueryHandler(handle_broadcast_button, pattern=r"^broadcast_"))
    
    # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # ...
from typing import Dict, List, Any, Optional, Tuple
import asyncio
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    filters
)
from telegram.constants import ParseMode

from config import logger, ADMIN_IDS
from admin_utils import (
    admin_base_menu,
    handle_admin_db_callback
)
from admin_messaging import (
    start_message_composition,
    handle_broadcast_message,
    handle_broadcast_button
)

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å admin_panel –Ω–∞ handle_admin_panel
async def handle_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üóÉÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
        [InlineKeyboardButton("üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
        [InlineKeyboardButton("üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await update.message.reply_text(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

def register_handlers(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CommandHandler("admin", handle_admin_panel, filters=filters.User(user_id=ADMIN_IDS)))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    application.add_handler(CallbackQueryHandler(handle_admin_db_callback, pattern=r"^admin_db"))
    application.add_handler(CallbackQueryHandler(handle_broadcast_button, pattern=r"^broadcast_"))
    
    # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # ...
from typing import Dict, List, Any, Optional, Tuple
import asyncio
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    filters
)
from telegram.constants import ParseMode

from config import logger, ADMIN_IDS
from admin_utils import (
    admin_base_menu,
    handle_admin_db_callback
)
from admin_messaging import (
    start_message_composition,
    handle_broadcast_message,
    handle_broadcast_button
)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üóÉÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
        [InlineKeyboardButton("üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_system")],
        [InlineKeyboardButton("üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await update.message.reply_text(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

def register_handlers(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CommandHandler("admin", admin_panel, filters=filters.User(user_id=ADMIN_IDS)))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    application.add_handler(CallbackQueryHandler(handle_admin_db_callback, pattern=r"^admin_db"))
    application.add_handler(CallbackQueryHandler(handle_broadcast_button, pattern=r"^broadcast_"))
    
    # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # ...

# –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é register_handlers, –∑–∞–º–µ–Ω–∏–≤ handle_admin_panel –Ω–∞ admin_panel
def register_handlers_fixed(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CommandHandler("admin", admin_panel, filters=filters.User(user_id=ADMIN_IDS)))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    application.add_handler(CallbackQueryHandler(handle_admin_db_callback, pattern=r"^admin_db"))
    application.add_handler(CallbackQueryHandler(handle_broadcast_button, pattern=r"^broadcast_"))
    
    # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # ...
import hashlib
import os
import csv
import re
import time
import asyncio
import io
import json
import tempfile
import shutil
from typing import Optional, List, Dict, Tuple, Any, Callable, Union
import sys

# –î–æ–±–∞–≤–∏–º –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è telegram –º–æ–¥—É–ª—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
import telegram as telegram_module  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ telegram_module, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import ContextTypes, Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
from telegram.constants import ParseMode
import fitz  # type: ignore # –¥–ª—è PDF (PyMuPDF)
import threading

# –°–¥–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º telegram –∫–∞–∫ –º–æ–¥—É–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
telegram = telegram_module  # —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö

from config import ADMIN_IDS, PDF_DOCS_DIR, logger, APP_ENV, TELEGRAM_TOKEN
from models import is_russian, llm
from database import load_knowledge, load_cache, save_cache, add_to_cache, get_cached_answer, get_unanswered_questions, mark_question_as_answered, add_unanswered_question
from knowledge_base import add_knowledge_node, get_children, get_topic_nodes, save_knowledge
from answer_generator import find_best_answer, generate_russian_answer
from pdf_handler import extract_text_from_pdf, index_pdf_file, process_pdf_file, update_all_pdf_index
from question_processing import generate_clarification, analyze_and_rephrase_question
from analytics import analytics
from security import security_manager, admin_required, rate_limit, validate_user_input, prevent_bot_abuse, check_bot_abuse
from enhanced_logging import logger, LoggingContext, log_critical_error
from error_handler import handle_error, ErrorHandler, async_error_handler, catch_exceptions
from vector_search import update_faiss_index
from admin_utils import admin_base_menu, handle_admin_db_callback
from backup_manager import backup_manager

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É AWAITING_KNOWLEDGE_QUESTION –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
AWAITING_KNOWLEDGE_QUESTION = 100
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É AWAITING_KNOWLEDGE_ANSWER –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
AWAITING_KNOWLEDGE_ANSWER = 101
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É AWAITING_PDF_FILE –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
AWAITING_PDF_FILE = 102

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_knowledge_question –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@async_error_handler
@admin_required
async def add_knowledge_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –≤ context.args: –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_knowledge_question \"–í–æ–ø—Ä–æ—Å\" \"–û—Ç–≤–µ—Ç\"",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤ –≤–æ–ø—Ä–æ—Å
    question = " ".join(context.args[:-1])
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –æ—Ç–≤–µ—Ç
    answer = context.args[-1]
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge = load_knowledge()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        new_id = 1
        if knowledge:
            new_id = max(int(item.get("id", 0)) for item in knowledge) + 1
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_entry = {
            "id": new_id,
            "question": question,
            "answer": answer,
            "topic_path": "–ø—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge.append(new_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        save_knowledge(knowledge)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(update_faiss_index())
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚úÖ <b>–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!</b>\n\n"
            f"ID: {new_id}\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–û—Ç–≤–µ—Ç: {answer}",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {e}")
        
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_knowledge_answer –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@async_error_handler
@admin_required
async def add_knowledge_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
    –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –≤ context.args: ID –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_knowledge_answer <ID> \"–û—Ç–≤–µ—Ç\"",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        question_id = int(context.args[0])
        answer = " ".join(context.args[1:])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge = load_knowledge()
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
        entry = next((item for item in knowledge if int(item.get("id", 0)) == question_id), None)
        
        if not entry:
            await update.message.reply_text(
                f"‚ùå <b>–í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode=telegram_module.constants.ParseMode.HTML
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        entry["answer"] = answer
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        save_knowledge(knowledge)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(update_faiss_index())
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚úÖ <b>–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"ID: {question_id}\n"
            f"–í–æ–ø—Ä–æ—Å: {entry['question']}\n"
            f"–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {answer}",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID</b>\n\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )

# –û–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é handle_admin_callback –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@async_error_handler
async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    data = query.data
    
    if data == "admin_stats":
        await handle_admin_stats(update, context)
    elif data == "admin_db":
        await admin_base_menu(update, context)
    elif data == "admin_update_indexes":
        await handle_admin_update_indexes(update, context)
    elif data == "admin_backup":
        await handle_admin_backup(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞: {data}")
        await query.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

# –û–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é start_teach –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@async_error_handler
@admin_required
async def start_teach(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    context.user_data['mode'] = 'teach_qa'
    context.user_data['teach_state'] = 'waiting_question'
    
    instruction_text = (
        "üß† <b>–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω</b>\n\n"
        "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –±–æ—Ç–∞.\n\n"
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å\n"
        "2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
        "3. –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_teach")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        instruction_text,
        parse_mode=telegram_module.constants.ParseMode.HTML,
        reply_markup=reply_markup
    )
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
        parse_mode=telegram_module.constants.ParseMode.HTML
    )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é start_add_pdf –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@async_error_handler
@admin_required
async def start_add_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF
    context.user_data['mode'] = 'add_pdf'
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    instruction_text = (
        "üìÑ <b>–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await update.message.reply_text(
        instruction_text,
        parse_mode=telegram_module.constants.ParseMode.HTML
    )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_pdf –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@async_error_handler
@admin_required
async def process_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF-—Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if not update.message.document:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pdf
    if not document.file_name.lower().endswith('.pdf'):
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    file = await context.bot.get_file(document.file_id)
    file_name = document.file_name
    pdf_path = os.path.join(PDF_DOCS_DIR, file_name)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(PDF_DOCS_DIR, exist_ok=True)
    
    await file.download_to_drive(pdf_path)
    
    await update.message.reply_text(
        "üìÑ <b>PDF-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</b>\n\n"
        "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ñ–∞–π–ª–∞...",
        parse_mode=telegram_module.constants.ParseMode.HTML
    )
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF-—Ñ–∞–π–ª
        result = await process_pdf_file(pdf_path)
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await update.message.reply_text(
            "‚úÖ <b>PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n\n"
            f"–§–∞–π–ª: {file_name}\n"
            f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {result.get('pages', 0)}\n"
            f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: {result.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤–∫–ª—é—á–∞—é—â–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–∞</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_teach_qa –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—É—á–µ–Ω–∏—è
@async_error_handler
async def handle_teach_qa(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ (teach_qa).
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        context.user_data.pop('mode', None)
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    teach_state = context.user_data.get('teach_state', 'waiting_question')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if teach_state == 'waiting_question':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –æ—Ç–≤–µ—Ç–∞
        context.user_data['current_question'] = update.message.text
        context.user_data['teach_state'] = 'waiting_answer'
        
        await update.message.reply_text(
            f"üìù –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: <b>{update.message.text}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
    
    elif teach_state == 'waiting_answer':
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
        question = context.user_data.get('current_question', '')
        answer = update.message.text
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge = load_knowledge()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        new_id = 1
        if knowledge:
            new_id = max(int(item.get("id", 0)) for item in knowledge) + 1
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_entry = {
            "id": new_id,
            "question": question,
            "answer": answer,
            "topic_path": "–æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge.append(new_entry)
        save_knowledge(knowledge)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(update_faiss_index())
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚úÖ <b>–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!</b>\n\n"
            f"ID: {new_id}\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–û—Ç–≤–µ—Ç: {answer}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞
        context.user_data['teach_state'] = 'waiting_question'
        context.user_data.pop('current_question', None)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_teach_bulk –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
@async_error_handler
async def handle_teach_bulk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤ —Ä–µ–∂–∏–º–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        context.user_data.pop('mode', None)
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    if update.message.text.strip().lower() == '/stop':
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
        context.user_data.pop('mode', None)
        await update.message.reply_text(
            "‚úÖ <b>–†–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
    await update.message.reply_text(
        "üìÇ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª</b>\n\n"
        "–î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ JSON.\n\n"
        "CSV-—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (;):\n"
        "–≤–æ–ø—Ä–æ—Å;–æ—Ç–≤–µ—Ç\n\n"
        "JSON-—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "[{\"question\": \"–≤–æ–ø—Ä–æ—Å\", \"answer\": \"–æ—Ç–≤–µ—Ç\"}, ...]\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop",
        parse_mode=telegram_module.constants.ParseMode.HTML
    )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_admin_edit –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@async_error_handler
async def handle_admin_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        context.user_data.pop('mode', None)
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_item_id = context.user_data.get('edit_item_id')
    edit_field = context.user_data.get('edit_field')
    
    if not edit_item_id or not edit_field:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('mode', None)
        context.user_data.pop('edit_item_id', None)
        context.user_data.pop('edit_field', None)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    new_value = update.message.text
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    knowledge = load_knowledge()
    
    # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
    entry = next((item for item in knowledge if int(item.get("id", 0)) == edit_item_id), None)
    
    if not entry:
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            f"–ó–∞–ø–∏—Å—å —Å ID {edit_item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('mode', None)
        context.user_data.pop('edit_item_id', None)
        context.user_data.pop('edit_field', None)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    old_value = entry.get(edit_field, "")
    entry[edit_field] = new_value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    save_knowledge(knowledge)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(update_faiss_index())
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await update.message.reply_text(
        f"‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
        f"ID: {edit_item_id}\n"
        f"–ü–æ–ª–µ: {edit_field}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}",
        parse_mode=telegram_module.constants.ParseMode.HTML
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop('mode', None)
    context.user_data.pop('edit_item_id', None)
    context.user_data.pop('edit_field', None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
async def add_bulk_entries(entries: List[Dict[str, str]]) -> int:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    
    Args:
        entries: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ "question" –∏ "answer"
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    knowledge = load_knowledge()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π ID
    start_id = 1
    if knowledge:
        start_id = max(int(item.get("id", 0)) for item in knowledge) + 1
    
    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    success_count = 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
    for i, entry in enumerate(entries):
        question = entry.get("question", "").strip()
        answer = entry.get("answer", "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç—ã–µ
        if not question or not answer:
            continue
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_entry = {
            "id": start_id + i,
            "question": question,
            "answer": answer,
            "topic_path": "–º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge.append(new_entry)
        success_count += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    if success_count > 0:
        save_knowledge(knowledge)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(update_faiss_index())
    
    return success_count

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
(
    WAITING_QUESTION, WAITING_ANSWER, WAITING_BULK_DATA, 
    WAITING_FILE, WAITING_PDF_FILE, WAITING_EDIT_INPUT
) = range(6)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@validate_user_input
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = update.effective_user.id
    analytics.record_event(
        user_id, 
        event_type="command", 
        event_data={"command": "start"}
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if security_manager.is_blocked(user_id):
        logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        await update.message.reply_text("‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    welcome_message = (
        "–ú–∏—Ä –í–∞–º! üåô \n\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ª–∞–º—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ. "
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n"
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id in ADMIN_IDS:
        welcome_message += "\nüëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        welcome_message += "/teach_auto - –ù–∞—á–∞—Ç—å —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n"
        welcome_message += "/add_pdf - –î–æ–±–∞–≤–∏—Ç—å PDF-—Ñ–∞–π–ª –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
        welcome_message += "/base - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        welcome_message += "/analyze - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n"
    
    await update.message.reply_text(welcome_message, parse_mode='HTML')

@async_error_handler
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_first_name = update.effective_user.first_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
    analytics.record_event(
        update.effective_user.id,
        "bot_start",
        {"username": update.effective_user.username}
    )
    
    welcome_text = (
        f"üëã –ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, {user_first_name}!\n\n"
        f"–Ø –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏—Å–ª–∞–º–µ.\n\n"
        f"üîç <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç "
        f"–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
        f"üïã <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"
        f"‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–º–∞–∑?\n"
        f"‚Ä¢ –ö–∞–∫ –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Å—Ç –≤ –†–∞–º–∞–¥–∞–Ω?\n"
        f"‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫—è—Ç –∏ –∫–æ–º—É –µ–≥–æ –¥–∞–≤–∞—Ç—å?\n\n"
        f"üìö –Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n\n"
        f"<i>–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —è –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è. "
        f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∏–º–∞–º–∞–º –∏ —É—á—ë–Ω—ã–º.</i>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("üìã –û –±–æ—Ç–µ", callback_data="about_bot")]
    ]
    
    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if update.effective_user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=telegram_module.constants.ParseMode.HTML
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ—Ä—É—Ç–∏–Ω—ã
    await update.message.reply_text("–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        return
    
    admin_text = (
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã", callback_data="admin_update_indexes")],
        [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_backup")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        admin_text,
        parse_mode=telegram_module.constants.ParseMode.HTML,
        reply_markup=reply_markup
    )

async def about_command(update, context):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: –≤–µ—Ä—Å–∏—è 1.0. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.")

async def typing_action(bot, chat_id, stop_event):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç...' –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
    
    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Telegram
        chat_id: ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å
        stop_event: –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    """
    try:
        while not stop_event.is_set():
            await bot.send_chat_action(chat_id=chat_id, action="typing")
            await asyncio.sleep(4)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ '–ø–µ—á–∞—Ç–∞–µ—Ç...': {e}")

@async_error_handler
@prevent_bot_abuse()
@rate_limit(5)  # –ù–µ –±–æ–ª–µ–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    if 'mode' in context.user_data:
        mode = context.user_data['mode']
        
        if mode == 'teach_qa':
            return await handle_teach_qa(update, context)
        elif mode == 'teach_bulk':
            return await handle_teach_bulk(update, context)
        elif mode == 'admin_edit':
            return await handle_admin_edit(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
    question = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    if not is_russian(question):
        await update.message.reply_text(
            "üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        )
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
    analytics.record_event(
        update.effective_user.id,
        "query",
        {"query_text": question[:100]}
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    stop_typing = asyncio.Event()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    typing_task = asyncio.create_task(
        typing_action(context.bot, update.effective_chat.id, stop_typing)
    )
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        analysis = await analyze_and_rephrase_question(question)
        
        # –ò—â–µ–º –æ—Ç–≤–µ—Ç
        answer, is_from_cache = await find_best_answer(
            question=question,
            variations=analysis["variations"],
            best_query=analysis["best_search_query"]
        )
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö
        if not answer or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in answer.lower():
            add_unanswered_question(update.effective_user.id, question)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        keyboard = [
            [InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data=f"feedback:useful:{hash(question)}")],
            [InlineKeyboardButton("üëé –ù–µ–ø–æ–ª–µ–∑–Ω–æ", callback_data=f"feedback:not_useful:{hash(question)}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        stop_typing.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ typing_task
        try:
            await typing_task
        except asyncio.CancelledError:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            answer,
            parse_mode=telegram_module.constants.ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..." –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not stop_typing.is_set():
            stop_typing.set()
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
        if typing_task and not typing_task.done():
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass

@async_error_handler
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    
    data = query.data
    
    if data == "ask_question":
        await query.message.reply_text(
            "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        )
    
    elif data == "about_bot":
        about_text = (
            "ü§ñ <b>–û –±–æ—Ç–µ</b>\n\n"
            "–Ø - –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏—Å–ª–∞–º–µ.\n\n"
            "üîç –Ø –∏—Å–ø–æ–ª—å–∑—É—é:<ul>"
            "<li>–ë–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</li>"
            "<li>–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</li>"
            "<li>–Ø–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤</li></ul>\n"
            "üìö –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–ª–∞–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç.\n\n"
            "<i>–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —è –ª–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è. "
            "–ü–æ –≤–∞–∂–Ω—ã–º —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—Å–µ–≥–¥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∏–º–∞–º–æ–º –∏–ª–∏ —É—á—ë–Ω—ã–º.</i>"
        )
        
        await query.message.edit_text(
            about_text,
            parse_mode=telegram_module.constants.ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )
    
    elif data == "back_to_start":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await query.message.delete()
        await start_command(update, context)
    
    elif data == "admin_panel":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if update.effective_user.id in ADMIN_IDS:
            admin_text = (
                "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã", callback_data="admin_update_indexes")],
                [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_backup")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            
            await query.message.edit_text(
                admin_text,
                parse_mode=telegram_module.constants.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.message.edit_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                ])
            )
    
    elif data.startswith("admin_db:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await handle_admin_db_callback(update, context)
    
    elif data.startswith("feedback:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
        parts = data.split(":")
        if len(parts) == 3:
            feedback_type = parts[1]
            question_hash = parts[2]
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
            analytics.record_event(
                update.effective_user.id,
                "feedback",
                {"type": feedback_type, "question_hash": question_hash}
            )
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            await query.edit_message_reply_markup(None)
            await query.message.reply_text(
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤."
            )
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–µ–∑–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ
            if feedback_type == "not_useful":
                await query.message.reply_text(
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
                )

    elif data.startswith("update_index"):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF
        await query.edit_message_text(
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
            "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        success = await update_all_pdf_index()
        
        if success:
            await query.edit_message_text(
                "‚úÖ <b>–ò–Ω–¥–µ–∫—Å PDF —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                "–ò–Ω–¥–µ–∫—Å PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_pdf")]]),
                parse_mode=telegram_module.constants.ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_pdf")]]),
                parse_mode=telegram_module.constants.ParseMode.HTML
            )

@async_error_handler
async def handle_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        else:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    stats_data = analytics.get_stats()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    current_time = time.strftime("%d.%m.%Y %H:%M:%S")
    stats_message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</b>\n\n"
    
    if stats_data:
        total_users = stats_data.get('total_users', 0)
        total_questions = stats_data.get('total_questions', 0)
        active_users_today = stats_data.get('active_users_today', 0)
        questions_today = stats_data.get('questions_today', 0)
        cache_hits = stats_data.get('cache_hits', 0)
        cache_misses = stats_data.get('cache_misses', 0)
        
        stats_message += f"üßë‚Äçüíª <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        stats_message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {active_users_today}\n\n"
        
        stats_message += f"‚ùì <b>–í–æ–ø—Ä–æ—Å—ã:</b>\n"
        stats_message += f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
        stats_message += f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {questions_today}\n\n"
        
        stats_message += f"üîç <b>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        cache_total = cache_hits + cache_misses
        cache_hit_rate = (cache_hits / cache_total * 100) if cache_total > 0 else 0
        stats_message += f"‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {cache_hits}\n"
        stats_message += f"‚Ä¢ –ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: {cache_misses}\n"
        stats_message += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {cache_hit_rate:.1f}%\n\n"
    else:
        stats_message += "‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
    
    stats_message += f"üïí –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {current_time}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats:refresh")],
        [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats:detailed")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            stats_message,
            reply_markup=reply_markup,
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            stats_message,
            reply_markup=reply_markup,
            parse_mode=telegram_module.constants.ParseMode.HTML
        )

@async_error_handler
async def handle_admin_update_indexes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        else:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π", callback_data="update_index:knowledge")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å PDF-—Ñ–∞–π–ª–æ–≤", callback_data="update_index:pdf")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã", callback_data="update_index:all")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=telegram_module.constants.ParseMode.HTML
        )

@async_error_handler
async def handle_admin_backup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        else:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        "üíæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üì§ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="backup:create")],
        [InlineKeyboardButton("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", callback_data="backup:restore_list")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", callback_data="backup:list")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=telegram_module.constants.ParseMode.HTML
        )

@async_error_handler
async def handle_backup_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action = query.data.split(":", 1)[1] if ":" in query.data else ""
    
    if action == "create":
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        await query.edit_message_text(
            "üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = await backup_manager.create_backup()
            
            # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            await query.edit_message_text(
                f"‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                f"–§–∞–π–ª: {os.path.basename(backup_path)}\n"
                f"–†–∞–∑–º–µ—Ä: {os.path.getsize(backup_path) / 1024 / 1024:.2f} –ú–ë\n"
                f"–î–∞—Ç–∞: {time.strftime('%d.%m.%Y %H:%M:%S')}",
                parse_mode=telegram_module.constants.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
                parse_mode=telegram_module.constants.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                ])
            )
    
    elif action == "list":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        await query.edit_message_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            backups = await backup_manager.list_backups()
            
            if backups:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
                message = "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
                
                for i, backup in enumerate(backups, 1):
                    message += f"{i}. <b>{backup['name']}</b>\n"
                    message += f"   üìÖ –î–∞—Ç–∞: {backup['date']}\n"
                    message += f"   üì¶ –†–∞–∑–º–µ—Ä: {backup['size'] / 1024 / 1024:.2f} –ú–ë\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                ]
                
                await query.edit_message_text(
                    message,
                    parse_mode=telegram_module.constants.ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.edit_message_text(
                    "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
                    "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    parse_mode=telegram_module.constants.ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                    ])
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {str(e)}")
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
                parse_mode=telegram_module.constants.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                ])
            )
    
    elif action == "restore_list":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await query.edit_message_text(
            "üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            backups = await backup_manager.list_backups()
            
            if backups:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
                message = "üì• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
                message += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                keyboard = []
                
                for i, backup in enumerate(backups, 1):
                    backup_name = backup['name']
                    backup_date = backup['date']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                    message += f"{i}. <b>{backup_name}</b>\n"
                    message += f"   üìÖ –î–∞—Ç–∞: {backup_date}\n"
                    message += f"   üì¶ –†–∞–∑–º–µ—Ä: {backup['size'] / 1024 / 1024:.2f} –ú–ë\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    keyboard.append([InlineKeyboardButton(
                        f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ø–∏—é #{i}",
                        callback_data=f"backup:restore:{backup_name}"
                    )])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")])
                
                await query.edit_message_text(
                    message,
                    parse_mode=telegram_module.constants.ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.edit_message_text(
                    "üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
                    "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    parse_mode=telegram_module.constants.ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                    ])
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {str(e)}")
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
                parse_mode=telegram_module.constants.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                ])
            )
    
    elif action.startswith("restore:"):
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_name = action.split(":", 1)[1]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.edit_message_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n"
            f"<b>{backup_name}</b>?\n\n"
            f"–í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã!",
            parse_mode=telegram_module.constants.ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup:confirm_restore:{backup_name}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="backup:restore_list")]
            ])
        )
    
    elif action.startswith("confirm_restore:"):
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        backup_name = action.split(":", 1)[1]
        
        await query.edit_message_text(
            f"üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
            f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: <b>{backup_name}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            await backup_manager.restore_backup(backup_name)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
            await query.edit_message_text(
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
                f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ <b>{backup_name}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.",
                parse_mode=telegram_module.constants.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
                parse_mode=telegram_module.constants.ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
                ])
            )
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.edit_message_text(
            "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode=telegram_module.constants.ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_backup")]
            ])
        )

@async_error_handler
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ PDF –∏–ª–∏ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = update.effective_user.id
    if security_manager.is_blocked(user_id):
        logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
        await update.message.reply_text("‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'mode' in context.user_data:
        mode = context.user_data['mode']
        
        if mode == 'add_pdf':
            # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç - PDF
            if update.message.document.file_name.lower().endswith('.pdf'):
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                file = await context.bot.get_file(update.message.document.file_id)
                file_name = update.message.document.file_name
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
                pdf_path = os.path.join(PDF_DOCS_DIR, file_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏ —Å–æ–∑–¥–∞–µ–º –µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                os.makedirs(PDF_DOCS_DIR, exist_ok=True)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                await file.download_to_drive(pdf_path)
                
                await update.message.reply_text(
                    "üìÑ <b>PDF-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</b>\n\n"
                    "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ñ–∞–π–ª–∞...",
                    parse_mode=telegram_module.constants.ParseMode.HTML
                )
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º PDF
                    result = await process_pdf_file(pdf_path)
                    
                    # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    await update.message.reply_text(
                        "‚úÖ <b>PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n\n"
                        f"–§–∞–π–ª: {file_name}\n"
                        f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {result.get('pages', 0)}\n"
                        f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: {result.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤–∫–ª—é—á–∞—é—â–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                        parse_mode=telegram_module.constants.ParseMode.HTML
                    )
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
                    context.user_data.pop('mode', None)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–∞: {str(e)}")
                    await update.message.reply_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–∞</b>\n\n"
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                        parse_mode=telegram_module.constants.ParseMode.HTML
                    )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ PDF
                await update.message.reply_text(
                    "‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
                    parse_mode=telegram_module.constants.ParseMode.HTML
                )
        
        elif mode == 'teach_bulk':
            # –†–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            file_name = update.message.document.file_name.lower()
            
            if file_name.endswith('.csv') or file_name.endswith('.json'):
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await context.bot.get_file(update.message.document.file_id)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                    await file.download_to_drive(temp_file.name)
                    temp_path = temp_file.name
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                    entries = []
                    
                    if file_name.endswith('.csv'):
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV-—Ñ–∞–π–ª
                        with open(temp_path, 'r', encoding='utf-8') as f:
                            csv_reader = csv.reader(f, delimiter=';')
                            for row in csv_reader:
                                if len(row) >= 2:
                                    entries.append({'question': row[0], 'answer': row[1]})
                    
                    elif file_name.endswith('.json'):
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON-—Ñ–∞–π–ª
                        with open(temp_path, 'r', encoding='utf-8') as f:
                            entries = json.load(f)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                    success_count = await add_bulk_entries(entries)
                    
                    await update.message.reply_text(
                        f"‚úÖ <b>–ú–∞—Å—Å–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
                        f"–î–æ–±–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(entries)} –∑–∞–ø–∏—Å–µ–π.\n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞.",
                        parse_mode=telegram_module.constants.ParseMode.HTML
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                    
                    await update.message.reply_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n"
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        parse_mode=telegram_module.constants.ParseMode.HTML
                    )
                
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    if os.path.exists(temp_path):
                        os.unlink(temp_path)
            else:
                # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
                await update.message.reply_text(
                    f"‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</b>\n\n"
                    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã CSV –∏ JSON.",
                    parse_mode=telegram_module.constants.ParseMode.HTML
                )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id in ADMIN_IDS:
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF
            file_name = update.message.document.file_name.lower()
            
            if file_name.endswith('.pdf'):
                await update.message.reply_text(
                    "üìÑ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω PDF-—Ñ–∞–π–ª</b>\n\n"
                    "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π?",
                    parse_mode=telegram_module.constants.ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_pdf:{update.message.document.file_id}")],
                        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add_pdf")]
                    ])
                )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
                await update.message.reply_text(
                    "‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞."
                )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            await update.message.reply_text(
                "‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
            )

@async_error_handler
async def handle_pdf_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å PDF-—Ñ–∞–π–ª–∞–º–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    data = query.data
    
    if data.startswith("add_pdf:"):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞
        file_id = data.split(":", 1)[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = await context.bot.get_file(file_id)
        document = query.message.reply_to_message.document
        file_name = document.file_name
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
        pdf_path = os.path.join(PDF_DOCS_DIR, file_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏ —Å–æ–∑–¥–∞–µ–º –µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        os.makedirs(PDF_DOCS_DIR, exist_ok=True)
        
        await query.edit_message_text(
            "üìÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–∞</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF-—Ñ–∞–π–ª
            await file.download_to_drive(pdf_path)
            result = await process_pdf_file(pdf_path)
            
            # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            await query.edit_message_text(
                "‚úÖ <b>PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n\n"
                f"–§–∞–π–ª: {file_name}\n"
                f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {result.get('pages', 0)}\n"
                f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: {result.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤–∫–ª—é—á–∞—é—â–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                parse_mode=telegram_module.constants.ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–∞: {str(e)}")
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–∞</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode=telegram_module.constants.ParseMode.HTML
            )
    
    elif data == "cancel_add_pdf":
        # –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–∞
        await query.edit_message_text(
            "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.edit_message_text(
            "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode=telegram_module.constants.ParseMode.HTML
        )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é cancel_conversation –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@async_error_handler
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    
    Returns:
        int: –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (ConversationHandler.END)
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await update.message.reply_text(
        "‚ùå <b>–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.",
        parse_mode=telegram_module.constants.ParseMode.HTML
    )
    
    return ConversationHandler.END
