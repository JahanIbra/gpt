import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.join(current_dir, 'root')
if root_dir not in sys.path:
    sys.path.insert(0, root_dir)

logger = logging.getLogger("bot")

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ root-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    try:
        from vector_search import update_faiss_index
    except ImportError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å update_faiss_index")
        
        async def update_faiss_index():
            logger.warning("–í—ã–∑–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ update_faiss_index")
            return False
    
    try:
        from pdf_handler import update_all_pdf_index
    except ImportError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å update_all_pdf_index")
        
        async def update_all_pdf_index():
            logger.warning("–í—ã–∑–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ update_all_pdf_index")
            return False
    
    try:
        from backup_manager import backup_manager
    except ImportError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å backup_manager")
        
        class DummyBackupManager:
            async def create_full_backup(self):
                logger.warning("–í—ã–∑–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ create_full_backup")
                return "/dummy/path/backup.tar.gz"
            
            async def list_backups(self):
                logger.warning("–í—ã–∑–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ list_backups")
                return []
        
        backup_manager = DummyBackupManager()
    
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ root-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
async def admin_base_menu(update, context):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è admin_base_menu"""
    query = update.callback_query if update.callback_query else None
    message = (query.message if query else update.message)
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.answer()
        await query.edit_message_text(
            "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=reply_markup
        )
    else:
        await message.reply_text(
            "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=reply_markup
        )

async def handle_admin_db_callback(update, context):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è handle_admin_db_callback"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ DB callback: {query.data}")
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {query.data}",
        reply_markup=reply_markup
    )

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def back_to_start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def admin_panel(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
            [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
            [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )

async def admin_stats_refresh(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n" \
                 "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 152\n" \
                 "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: 24\n" \
                 "–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: 341\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats:refresh")],
        [InlineKeyboardButton("üìë –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="admin_stats:detailed")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=stats_text,
        reply_markup=reply_markup
    )

async def admin_stats_detailed(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    detailed_stats = "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" \
                     "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 152\n" \
                     "  - –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: 17\n" \
                     "  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: 98\n\n" \
                     "–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: 2135\n" \
                     "  - –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: 1856\n" \
                     "  - –° –º–µ–¥–∏–∞: 279\n\n" \
                     "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n" \
                     "  - /start: 43\n" \
                     "  - /help: 28\n"
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_stats:refresh")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=detailed_stats,
        reply_markup=reply_markup
    )

async def admin_db_handler(update: Update, context: CallbackContext) -> None:
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    await admin_base_menu(update, context)

async def cancel_teach(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer("–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    if 'mode' in context.user_data:
        del context.user_data['mode']
    if 'qa_pairs' in context.user_data:
        del context.user_data['qa_pairs']
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=reply_markup
    )

async def update_all_indexes(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã"""
    query = update.callback_query
    await query.answer("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    message = await query.edit_message_text(
        "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤</b>\n\n"
        "–ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...",
        parse_mode="HTML"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    success_knowledge = await update_faiss_index()
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å PDF
    success_pdf = await update_all_pdf_index()
    
    result_text = "üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤</b>\n\n"
    result_text += "‚úÖ " if success_knowledge else "‚ùå "
    result_text += "–ò–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
    result_text += "‚úÖ " if success_pdf else "‚ùå "
    result_text += "–ò–Ω–¥–µ–∫—Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.edit_text(
        result_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def update_knowledge_index(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    
    message = await query.edit_message_text(
        "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>\n\n"
        "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    success = await update_faiss_index()
    
    result_text = "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>\n\n"
    if success:
        result_text += "‚úÖ –ò–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
        result_text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É."
    else:
        result_text += "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.\n"
        result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.edit_text(
        result_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def update_pdf_index(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ PDF...")
    
    message = await query.edit_message_text(
        "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
        "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    success = await update_all_pdf_index()
    
    result_text = "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ PDF</b>\n\n"
    if success:
        result_text += "‚úÖ –ò–Ω–¥–µ–∫—Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
        result_text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É."
    else:
        result_text += "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.edit_text(
        result_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def create_backup(update: Update, context: CallbackContext) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    message = await query.edit_message_text(
        "üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
        "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = await backup_manager.create_full_backup()
        
        result_text = "üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
        result_text += f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
        result_text += f"üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {backup_path}"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        result_text = "üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
        result_text += f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)[:100]}"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.edit_text(
        result_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def list_backups(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    query = update.callback_query
    await query.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    
    message = await query.edit_message_text(
        "üíæ <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        backups = await backup_manager.list_backups()
        
        result_text = "üíæ <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
        
        if backups:
            for i, backup in enumerate(backups, 1):
                created_at = backup.get("created_at", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                size_mb = backup.get("size", 0) / (1024 * 1024)
                result_text += f"{i}. {backup['filename']}\n"
                result_text += f"   üìÖ {created_at}\n"
                result_text += f"   üìä {size_mb:.2f} –ú–ë\n\n"
        else:
            result_text += "–†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        result_text = "üíæ <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
        result_text += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)[:100]}"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="backup:list")],
        [InlineKeyboardButton("üì§ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="backup:restore_list")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.edit_text(
        result_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def restore_backup_list(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    message = await query.edit_message_text(
        "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ø–∏–π...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        backups = await backup_manager.list_backups()
        
        result_text = "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
        result_text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!\n\n"
        result_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
        
        keyboard = []
        
        if backups:
            for i, backup in enumerate(backups, 1):
                created_at = backup.get("created_at", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                size_mb = backup.get("size", 0) / (1024 * 1024)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                keyboard.append([
                    InlineKeyboardButton(
                        f"{i}. {backup['filename']} ({size_mb:.1f} –ú–ë)",
                        callback_data=f"backup:restore:{backup['path']}"
                    )
                ])
        else:
            result_text += "–†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:list")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        result_text = "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
        result_text += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)[:100]}"
        
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:list")]
        ])
    
    await message.edit_text(
        result_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

# –°–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
admin_handlers = {
    "back_to_start": back_to_start,
    "admin_panel": admin_panel,
    "admin_stats:refresh": admin_stats_refresh,
    "admin_stats:detailed": admin_stats_detailed,
    "admin_db": admin_db_handler,
    "admin_db:knowledge": handle_admin_db_callback,
    "admin_db:cache": handle_admin_db_callback,
    "admin_db:pdf": handle_admin_db_callback,
    "admin_db:unanswered": handle_admin_db_callback,
    "admin_db:export": handle_admin_db_callback,
    "admin_db:import": handle_admin_db_callback,
    "admin_db:clear_cache": handle_admin_db_callback,
    "update_index:all": update_all_indexes,
    "update_index:pdf": update_pdf_index,
    "update_index:knowledge": update_knowledge_index,
    "backup:create": create_backup,
    "backup:list": list_backups,
    "backup:restore_list": restore_backup_list,
    "cancel_teach": cancel_teach,
    "test_admin": admin_panel  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
}
